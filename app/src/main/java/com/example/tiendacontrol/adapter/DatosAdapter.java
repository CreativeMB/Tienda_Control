package com.example.tiendacontrol.adapter;import static java.security.AccessController.getContext;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AlertDialog;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.RecyclerView;import com.example.tiendacontrol.R;import com.example.tiendacontrol.helper.BdVentas;import com.example.tiendacontrol.model.Items;import java.text.DecimalFormat;import java.text.DecimalFormatSymbols;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Locale;public class DatosAdapter extends RecyclerView.Adapter<DatosAdapter.ContactoViewHolder>{    private List<Items> itemsList; // Lista interna del adaptador    private ArrayList<Items> listaVentas; // Lista de ventas    private HashSet<Items> conjuntoOriginal; // Conjunto para filtrados eficientes    private Context context; // Contexto para acceder a recursos y mostrar Toasts    private BdVentas bdVentas;    String currentDatabase; // Variable para almacenar el nombre de la base de datos actual    public DatosAdapter(Context context, ArrayList<Items> listaVentas, BdVentas bdVentas) {        this.context = context;        this.listaVentas = listaVentas;        this.conjuntoOriginal = new HashSet<>(listaVentas);        this.itemsList = new ArrayList<>(listaVentas);        this.bdVentas = bdVentas; // Guarda la referencia        ordenarPorFecha();    }    @NonNull    @Override    public ContactoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.lista_item, parent, false);        return new ContactoViewHolder(view, this);        // Pasar la referencia del adaptador al ViewHolder    }    public void setBdVentas(BdVentas bdVentas) {        this.bdVentas = bdVentas;    }    @Override    public void onBindViewHolder(@NonNull ContactoViewHolder holder, int position) {        Items venta = listaVentas.get(position);        holder.viewProducto.setText(venta.getProducto());        double valor = venta.getValorAsDouble();        holder.viewValor.setText(formatoNumerico(Math.abs(valor)));        holder.viewValor.setTextColor(ContextCompat.getColor(holder.itemView.getContext(),                valor < 0 ? R.color.colorNegativo : R.color.colorPositivo));        holder.viewDetalles.setText(venta.getDetalles());        holder.viewCantidad.setText(String.format("Unds: %d", venta.getCantidad()));        holder.viewFecha.setText(venta.getFechaRegistro());        holder.itemView.setBackgroundColor(ContextCompat.getColor(holder.itemView.getContext(),                valor < 0 ? R.color.colorFondoNegativo : R.color.colorFondoPositivo));    }    public void filtrado(final String txtBuscar) {        listaVentas.clear();        if (txtBuscar.isEmpty()) {            listaVentas.addAll(conjuntoOriginal);        } else {            String buscarMinusculas = txtBuscar.toLowerCase();            for (Items venta : conjuntoOriginal) {                if (venta.getProducto().toLowerCase().contains(buscarMinusculas)) {                    listaVentas.add(venta);                }            }        }        ordenarPorFecha();        notifyDataSetChanged();    }    @Override    public int getItemCount() {        return listaVentas.size();    }    public String formatoNumerico(double valor) {        DecimalFormatSymbols symbols = new DecimalFormatSymbols();        symbols.setGroupingSeparator('.');        DecimalFormat df = new DecimalFormat("#,###", symbols);        return "$" + df.format(valor);    }    public void setItems(ArrayList<Items> items) {        conjuntoOriginal.clear();        conjuntoOriginal.addAll(items);        listaVentas.clear();        listaVentas.addAll(conjuntoOriginal);        ordenarPorFecha();        notifyDataSetChanged();    }    public void ordenarPorFecha() {        Collections.sort(listaVentas, new Comparator<Items>() {            @Override            public int compare(Items item1, Items item2) {                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());                try {                    Date date1 = sdf.parse(item1.getFechaRegistro());                    Date date2 = sdf.parse(item2.getFechaRegistro());                    if (date1 == null && date2 == null) return 0;                    if (date1 == null) return 1;                    if (date2 == null) return -1;                    return date2.compareTo(date1); // Orden descendente                } catch (ParseException e) {                    Log.e("DatosAdapter", "Error al analizar fechas: " + e.getMessage());                    return 0;                }            }        });    }    private void actualizarItemEnBD(Items item) {        if (bdVentas != null) {            SQLiteDatabase db = null;            boolean transactionStarted = false;            try {                db = bdVentas.getWritableDatabase();                if (db != null) {                    // --- INICIO DE LA DEPURACIÓN ---                    // 1. Imprimir el ID del elemento que se intenta actualizar:                    Log.d("DebugDB", "Intentando actualizar el elemento con ID: " + item.getId());                    // 2. Consultar la base de datos para ver si el elemento existe:                    Cursor cursor = db.rawQuery("SELECT * FROM Mi_Contabilidad WHERE id = ?",                            new String[]{String.valueOf(item.getId())});                    if (cursor.moveToFirst()) {                        Log.d("DebugDB", "Elemento encontrado en la base de datos:");                        int itemId = cursor.getInt(cursor.getColumnIndexOrThrow("id"));                        String itemProducto = cursor.getString(cursor.getColumnIndexOrThrow("producto"));                        // ... obtener otros valores de las columnas ...                        Log.d("DebugDB", "ID: " + itemId + ", Producto: " + itemProducto + ", ...");                    } else {                        Log.e("DebugDB", "ERROR: No se encontró el elemento en la base de datos.");                        // Salir del método si no se encuentra el elemento, ya que no hay nada que actualizar.                        return;                    }                    cursor.close();                    // --- FIN DE LA DEPURACIÓN ---                    db.beginTransaction();                    transactionStarted = true;                    ContentValues values = new ContentValues();                    values.put("producto", item.getProducto());                    values.put("valor", item.getValor());                    values.put("detalles", item.getDetalles());                    values.put("cantidad", item.getCantidad());                    int rowsAffected = db.update(BdVentas.TABLE_VENTAS, values, "id = ?",                            new String[]{String.valueOf(item.getId())});                    if (rowsAffected > 0) {                        db.setTransactionSuccessful();                        Log.d("DatosAdapter", "Item actualizado en la base de datos. Filas afectadas: " + rowsAffected);                        Toast.makeText(context, "Item actualizado en la base de datos", Toast.LENGTH_SHORT).show();                    } else {                        Log.e("DatosAdapter", "ERROR: No se pudo actualizar el elemento en la base de datos. Filas afectadas: " + rowsAffected);                        Toast.makeText(context, "Error al actualizar el item en la base de datos", Toast.LENGTH_SHORT).show();                    }                } else {                    Log.e("DatosAdapter", "Error al abrir la base de datos para escritura");                    Toast.makeText(context, "Error al abrir la base de datos", Toast.LENGTH_SHORT).show();                }            } catch (Exception e) {                Log.e("DatosAdapter", "Error al actualizar el item en la base de datos: " + e.getMessage());                Toast.makeText(context, "Error al actualizar el item en la base de datos", Toast.LENGTH_SHORT).show();            } finally {                if (db != null && transactionStarted) {                    db.endTransaction();                    db.close();                }            }        } else {            Log.e("DatosAdapter", "BdVentas no está inicializado.");            Toast.makeText(context, "Error al actualizar el item en la base de datos", Toast.LENGTH_SHORT).show();        }    }    private void eliminarItemEnBD(Items item) {        if (bdVentas != null) {            boolean result = bdVentas.eliminarItem(item);            if (result) {                Toast.makeText(context, "Item eliminado de la base de datos", Toast.LENGTH_SHORT).show();            } else {                Toast.makeText(context, "Error al eliminar el item de la base de datos", Toast.LENGTH_SHORT).show();            }        } else {            Log.e("DatosAdapter", "BdVentas no está inicializado.");        }    }    public static class ContactoViewHolder extends RecyclerView.ViewHolder {        TextView viewProducto, viewValor, viewDetalles, viewCantidad, viewFecha;        DatosAdapter adapter;        public ContactoViewHolder(@NonNull View itemView, DatosAdapter adapter) {            super(itemView);            this.adapter = adapter;            viewProducto = itemView.findViewById(R.id.viewProducto);            viewValor = itemView.findViewById(R.id.viewValor);            viewDetalles = itemView.findViewById(R.id.viewDetalles);            viewCantidad = itemView.findViewById(R.id.viewCantidad);            viewFecha = itemView.findViewById(R.id.viewFecha);            itemView.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    int position = getAdapterPosition();                    Items venta = adapter.listaVentas.get(position);                    adapter.mostrarDialogoOpciones(venta, position);                }            });        }    }    private void mostrarDialogoOpciones(final Items venta, final int position) {        new AlertDialog.Builder(context)                .setTitle("Opciones")                .setItems(new CharSequence[]{"Editar", "Eliminar"}, new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        if (which == 0) {                            mostrarDialogoEdicion(venta, position);                        } else if (which == 1) {                            eliminarItem(venta, position);                        }                    }                })                .show();    }    private void mostrarDialogoEdicion(final Items venta, final int position) {        LayoutInflater inflater = LayoutInflater.from(context);        View dialogView = inflater.inflate(R.layout.dialogo_edicion, null);        final EditText inputProducto = dialogView.findViewById(R.id.inputProducto);        final EditText inputValor = dialogView.findViewById(R.id.inputValor);        final EditText inputCantidad = dialogView.findViewById(R.id.inputCantidad);        final EditText inputDetalles = dialogView.findViewById(R.id.inputDetalles);        inputProducto.setText(venta.getProducto());        inputValor.setText(String.valueOf(venta.getValorAsDouble()));        inputCantidad.setText(String.valueOf(venta.getCantidad()));        inputDetalles.setText(venta.getDetalles());        new AlertDialog.Builder(context)                .setTitle("Editar Item")                .setView(dialogView)                .setPositiveButton("Guardar", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int whichButton) {                        try {                            venta.setProducto(inputProducto.getText().toString());                            venta.setValor(Double.parseDouble(inputValor.getText().toString()));                            venta.setCantidad(Integer.parseInt(inputCantidad.getText().toString()));                            venta.setDetalles(inputDetalles.getText().toString());                            // Asegurar que el ID esté establecido:                            venta.setId(listaVentas.get(position).getId());                            actualizarItemEnBD(venta);                            notifyItemChanged(position);                            Toast.makeText(context, "Item editado", Toast.LENGTH_SHORT).show();                        } catch (NumberFormatException e) {                            Toast.makeText(context, "Error en el formato de los valores", Toast.LENGTH_SHORT).show();                        }                    }                })                .setNegativeButton("Cancelar", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int whichButton) {                        dialog.dismiss();                    }                })                .show();    }    private void eliminarItem(final Items venta, final int position) {        new AlertDialog.Builder(context)                .setTitle("Confirmar Eliminación")                .setMessage("¿Está seguro de eliminar este ítem?")                .setPositiveButton("Eliminar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        eliminarItemEnBD(venta);                        listaVentas.remove(position);                        notifyItemRemoved(position);                        notifyItemRangeChanged(position, listaVentas.size());                    }                })                .setNegativeButton("Cancelar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.dismiss();                    }                })                .show();    }}