package com.example.tiendacontrol.adapter;import android.content.ContentValues;import android.content.Context;import android.content.DialogInterface;import android.database.sqlite.SQLiteDatabase;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.EditText;import android.widget.ImageView;import android.widget.TextView;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.appcompat.app.AlertDialog;import androidx.cardview.widget.CardView;import androidx.core.content.ContextCompat;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.example.tiendacontrol.R;import com.example.tiendacontrol.helper.BdVentas;import com.example.tiendacontrol.helper.PuntoMil;import com.example.tiendacontrol.model.Items;import java.text.DecimalFormat;import java.text.DecimalFormatSymbols;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Collections;import java.util.Comparator;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Locale;public class DatosAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> { // Cambiado a RecyclerView.ViewHolder    private static final int VIEW_TYPE_EMPTY = 0;    private static final int VIEW_TYPE_ITEM = 1;    private List<Items> itemsList;    private ArrayList<Items> listaVentas;    private HashSet<Items> conjuntoOriginal;    private Context context;    private BdVentas bdVentas;    String currentDatabase;    public DatosAdapter(Context context, ArrayList<Items> listaVentas, BdVentas bdVentas) {        this.context = context;        this.listaVentas = listaVentas;        this.conjuntoOriginal = new HashSet<>(listaVentas);        this.itemsList = new ArrayList<>(listaVentas);        this.bdVentas = bdVentas;        ordenarPorFecha();    }    @NonNull    @Override    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {        if (viewType == VIEW_TYPE_ITEM) {            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.lista_item, parent, false);            return new ContactoViewHolder(view, this);        } else {            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.datosinicio, parent, false);            return new EmptyViewHolder(view);        }    }    @Override    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {        if (holder instanceof ContactoViewHolder) {            ContactoViewHolder contactoViewHolder = (ContactoViewHolder) holder;            Items venta = listaVentas.get(position);            contactoViewHolder.viewProducto.setText(venta.getProducto());            double valor = venta.getValorAsDouble();            contactoViewHolder.viewValor.setText(formatoNumerico(Math.abs(valor)));            contactoViewHolder.viewDetalles.setText(venta.getDetalles());            contactoViewHolder.viewCantidad.setText(String.format("Unds: %d", venta.getCantidad()));            contactoViewHolder.viewFecha.setText(venta.getFechaRegistro());            int colorFondo = valor < 0 ? R.color.colorFondoNegativo : R.color.colorFondoPositivo;            contactoViewHolder.cardView.setCardBackgroundColor(ContextCompat.getColor(contactoViewHolder.itemView.getContext(), colorFondo));            int icono = valor < 0 ? R.drawable.egreso : R.drawable.ingreso;            contactoViewHolder.imageItems.setImageResource(icono);        } else if (holder instanceof EmptyViewHolder) {            // No se necesita hacer nada aquí si no hay elementos específicos para configurar            // en la vista EmptyViewHolder.        }    }    public void setBdVentas(BdVentas bdVentas) {        this.bdVentas = bdVentas;    }    public void filtrado(final String txtBuscar) {        listaVentas.clear();        if (txtBuscar.isEmpty()) {            listaVentas.addAll(conjuntoOriginal);        } else {            String buscarMinusculas = txtBuscar.toLowerCase();            for (Items venta : conjuntoOriginal) {                if (venta.getProducto().toLowerCase().contains(buscarMinusculas)) {                    listaVentas.add(venta);                }            }        }        ordenarPorFecha();        notifyDataSetChanged();    }    @Override    public int getItemCount() {        return listaVentas.isEmpty() ? 1 : listaVentas.size();    }    @Override    public int getItemViewType(int position) {        if (listaVentas.isEmpty()) {            return VIEW_TYPE_EMPTY;        } else {            return VIEW_TYPE_ITEM;        }    }    public String formatoNumerico(double valor) {        DecimalFormatSymbols symbols = new DecimalFormatSymbols();        symbols.setGroupingSeparator('.');        DecimalFormat df = new DecimalFormat("#,###", symbols);        return "$" + df.format(valor);    }    public void setItems(ArrayList<Items> items) {        conjuntoOriginal.clear();        conjuntoOriginal.addAll(items);        listaVentas.clear();        listaVentas.addAll(conjuntoOriginal);        ordenarPorFecha();        notifyDataSetChanged();    }    public void ordenarPorFecha() {        Collections.sort(listaVentas, new Comparator<Items>() {            @Override            public int compare(Items item1, Items item2) {                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault());                try {                    Date date1 = sdf.parse(item1.getFechaRegistro());                    Date date2 = sdf.parse(item2.getFechaRegistro());                    if (date1 == null && date2 == null) return 0;                    if (date1 == null) return 1;                    if (date2 == null) return -1;                    return date2.compareTo(date1); // Orden descendente                } catch (ParseException e) {                    Log.e("DatosAdapter", "Error al analizar fechas: " + e.getMessage());                    return 0;                }            }        });    }    private void actualizarItemEnBD(Items item) {        if (bdVentas != null) {            SQLiteDatabase db = null;            boolean transactionStarted = false;            try {                db = bdVentas.getWritableDatabase();                if (db != null) {                    db.beginTransaction();                    transactionStarted = true;                    ContentValues values = new ContentValues();                    values.put("producto", item.getProducto());                    values.put("valor", item.getValor());                    values.put("detalles", item.getDetalles());                    values.put("cantidad", item.getCantidad());                    int rowsAffected = db.update(BdVentas.TABLE_VENTAS, values, "id = ?",                            new String[]{String.valueOf(item.getId())});                    if (rowsAffected > 0) {                        db.setTransactionSuccessful();                        Toast.makeText(context, "Item actualizado en la base de datos", Toast.LENGTH_SHORT).show();                    } else {                        Toast.makeText(context, "Error al actualizar el item en la base de datos", Toast.LENGTH_SHORT).show();                    }                } else {                    Toast.makeText(context, "Error al abrir la base de datos", Toast.LENGTH_SHORT).show();                }            } catch (Exception e) {                Toast.makeText(context, "Error al actualizar el item en la base de datos", Toast.LENGTH_SHORT).show();            } finally {                if (db != null && transactionStarted) {                    db.endTransaction();                    db.close();                }            }        } else {            Toast.makeText(context, "Error al actualizar el item en la base de datos", Toast.LENGTH_SHORT).show();        }    }    private void eliminarItemEnBD(Items item) {        if (bdVentas != null) {            boolean result = bdVentas.eliminarItem(item);            if (result) {                Toast.makeText(context, "Item eliminado de la base de datos", Toast.LENGTH_SHORT).show();            } else {                Toast.makeText(context, "Error al eliminar el item de la base de datos", Toast.LENGTH_SHORT).show();            }        }    }    public static class ContactoViewHolder extends RecyclerView.ViewHolder {        TextView viewProducto, viewValor, viewDetalles, viewCantidad, viewFecha;        ImageView  imageItems;        CardView cardView;        DatosAdapter adapter;        public ContactoViewHolder(@NonNull View itemView, DatosAdapter adapter) {            super(itemView);            this.adapter = adapter;            viewProducto = itemView.findViewById(R.id.viewProducto);            viewValor = itemView.findViewById(R.id.viewValor);            viewDetalles = itemView.findViewById(R.id.viewDetalles);            viewCantidad = itemView.findViewById(R.id.viewCantidad);            viewFecha = itemView.findViewById(R.id.viewFecha);            cardView = itemView.findViewById(R.id.cardView);            imageItems = itemView.findViewById(R.id. imageItems);            itemView.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View view) {                    int position = getAdapterPosition();                    Items venta = adapter.listaVentas.get(position);                    adapter.mostrarDialogoOpciones(venta, position);                }            });        }    }    private void mostrarDialogoOpciones(final Items venta, final int position) {        LayoutInflater inflater = LayoutInflater.from(context);        View dialogView = inflater.inflate(R.layout.dialogoeditareliminar, null);// Encontrar los botones en el diseño inflado        TextView opcionEditar = dialogView.findViewById(R.id.opcionEditar);        TextView opcionEliminar = dialogView.findViewById(R.id.opcionEliminar);        // Crear el AlertDialog sin aplicar estilo personalizado        AlertDialog dialog = new AlertDialog.Builder(context)                .setView(dialogView)                .create();        // Configurar los eventos de clic        opcionEditar.setOnClickListener(v -> {            mostrarDialogoEdicion(venta, position);            dialog.dismiss();  // Cierra el diálogo        });        opcionEliminar.setOnClickListener(v -> {            eliminarItem(venta, position);            dialog.dismiss();  // Cierra el diálogo        });        // Mostrar el diálogo        dialog.show();    }    private void mostrarDialogoEdicion(final Items venta, final int position) {        LayoutInflater inflater = LayoutInflater.from(context);        View dialogView = inflater.inflate(R.layout.dialogoedicion, null);        final EditText inputProducto = dialogView.findViewById(R.id.inputProducto);        final EditText inputValor = dialogView.findViewById(R.id.inputValor);        final EditText inputCantidad = dialogView.findViewById(R.id.inputCantidad);        final EditText inputDetalles = dialogView.findViewById(R.id.inputDetalles);        inputProducto.setText(venta.getProducto());        // Formatear el valor para la vista y mantener el signo negativo si es necesario        long valorLong = (long) venta.getValorAsDouble();        String valorFormateado = PuntoMil.getFormattedNumber(valorLong);        inputValor.setText((valorLong < 0 ? "-" : "") + valorFormateado);        inputCantidad.setText(String.valueOf(venta.getCantidad()));        inputDetalles.setText(venta.getDetalles());        // Aplicar el formato con separadores de mil        PuntoMil.formatNumberWithThousandSeparator(inputValor);        AlertDialog dialog = new AlertDialog.Builder(context)                .setTitle("Editar Item")                .setView(dialogView)                .setPositiveButton("Guardar", null)                .setNegativeButton("Cancelar", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int whichButton) {                        dialog.dismiss();                    }                })                .create();        dialog.show();        dialog.getButton(AlertDialog.BUTTON_POSITIVE).setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    String valorTexto = inputValor.getText().toString().trim().replaceAll("[^\\d-]", "");                    String cantidadTexto = inputCantidad.getText().toString().trim();                    if (valorTexto.isEmpty()) {                        Toast.makeText(context, "El valor no puede estar vacío", Toast.LENGTH_SHORT).show();                        return;                    }                    long valor = Long.parseLong(valorTexto);                    int cantidad = Integer.parseInt(cantidadTexto);                    // Verificar que el valor sea negativo si originalmente lo era                    if (venta.getValor() < 0 && valor >= 0) {                        Toast.makeText(context, "El valor debe ser negativo", Toast.LENGTH_SHORT).show();                        return;                    }                    // Si el valor original era negativo, aplicar el signo negativo                    if (venta.getValor() < 0 && valor > 0) {                        valor = -valor;                    }                    // Calcular el total multiplicando valor por cantidad                    int total = (int) (valor * cantidad);                    // Actualizar los datos del item                    venta.setProducto(inputProducto.getText().toString());                    venta.setValor(total);                    venta.setCantidad(cantidad);                    venta.setDetalles(inputDetalles.getText().toString());                    // Asegurar que el ID esté establecido:                    venta.setId(listaVentas.get(position).getId());                    // Actualizar el item en la base de datos                    actualizarItemEnBD(venta);                    // Notificar el cambio en el adaptador                    notifyItemChanged(position);                    Toast.makeText(context, "Item editado", Toast.LENGTH_SHORT).show();                    dialog.dismiss(); // Cerrar el diálogo al terminar                } catch (NumberFormatException e) {                    Toast.makeText(context, "Error en el formato de los valores", Toast.LENGTH_SHORT).show();                }            }        });    }    private void eliminarItem(final Items venta, final int position) {        new AlertDialog.Builder(context)                .setTitle("Confirmar Eliminación")                .setMessage("¿Está seguro de eliminar este ítem?")                .setPositiveButton("Eliminar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        eliminarItemEnBD(venta);                        listaVentas.remove(position);                        notifyItemRemoved(position);                        notifyItemRangeChanged(position, listaVentas.size());                    }                })                .setNegativeButton("Cancelar", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        dialog.dismiss();                    }                })                .show();    }    // ViewHolder para la vista vacía    public static class EmptyViewHolder extends RecyclerView.ViewHolder {        public EmptyViewHolder(View itemView) {            super(itemView);        }    }    @Override    public void onAttachedToRecyclerView(@NonNull RecyclerView recyclerView) {        super.onAttachedToRecyclerView(recyclerView);        RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();        if (layoutManager instanceof GridLayoutManager) {            GridLayoutManager gridLayoutManager = (GridLayoutManager) layoutManager;            gridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {                @Override                public int getSpanSize(int position) {                    // La vista vacía (posición 0 cuando la lista está vacía) ocupa ambas columnas                    return getItemViewType(position) == VIEW_TYPE_EMPTY ? 2 : 1;                }            });        }    }}